# 'combinations' is a list of lists of codes to merge together. The earlier
# codes will take priority, so if all are found, only the first one will be
# left after blending.
#
# Note that since not all tools will necessarily be run, the first message for
# a line as sorted by the code list will be the one remaining after blending.

combinations:
  - # Unused Import
    - pylint: unused-import
    - pyflakes: F401
    - frosted: E101
    - ruff: F401

  - # Syntax Error
    - dodgy: diff
    - pylint: syntax-error
    - pyflakes: F999
    - pep8: E901
    # expected an indented block
    - pycodestyle: E112
    # IndentationError: unindent does not match any outer indentation level
    - pycodestyle: E901
    - mccabe: MC0000
    - frosted: E402

  - # Undefined local variable
    - pylint: undefined-variable
    - pyflakes: F821
    - frosted: E303
    - ruff: F821
    - mypy: name-defined

  - # Unused variable
    - pylint: unused-variable
    - vulture: unused-variable
    - pyflakes: F841
    - frosted: E307
    - ruff: F841

  - # Mixed tabs and spaces
    - pep257: D206
    - pydocstyle: D206
    - pep8: E101
    - pycodestyle: E101
    - pylint: indentation-mixture
    - ruff: D206

  - # Import from __future__ not first import
    - pylint: misplaced-future
    - pyflakes: F404
    - frosted: E207
    - ruff: F404

  - # Line too long
    - pep8: E501
    - pycodestyle: E501
    - pylint: line-too-long

  - # Trailing whitespace
    - pep8: W291
    - pycodestyle: W291
    - pylint: trailing-whitespace

  - # Blank line contains whitespace
    - pep8: W293
    - pycodestyle: W293
    - pylint: trailing-whitespace

  - # No newline at end of file
    - pep8: W292
    - pycodestyle: W292
    - pylint: missing-final-newline

  - # line ends with semi-colon
    - pep8: E703
    - pycodestyle: E703
    - pylint: unnecessary-semicolon

  - # multiple statements on one line (colon)
    - pep8: E701
    - pycodestyle: E701
    - pylint: multiple-statements

  - # multiple statements on one line (semicolon)
    - pep8: E702
    - pycodestyle: E702
    - pylint: multiple-statements

  - # incorrect indentation
    - pep257: D207
    - pydocstyle: D207
    - pep8: E111
    - pycodestyle: E111
    - pylint: bad-indentation
    - ruff: D207

  - # incorrect indentation
    - pep257: D208
    - pydocstyle: D208
    - pep8: E111
    - pycodestyle: E111
    - pylint: bad-indentation
    - ruff: D208

  - # comma not followed by a space
    - pep8: E231
    - pycodestyle: E231
    - pylint: C0324
    - pylint: bad-whitespace

  - # missing whitespace around operator
    - pep8: E225
    - pycodestyle: E225
    - pylint: C0322
    - pylint: bad-whitespace

  - # missing whitespace around operator
    - pep8: E225
    - pycodestyle: E225
    - pylint: C0323
    - pylint: bad-whitespace

  - # undefined name in __all__
    - pylint: undefined-all-variable
    - pyflakes: F822
    - frosted: E304
    - ruff: F822

  - # duplicate argument in function definition
    - pylint: duplicate-argument-name
    - pyflakes: F831
    - frosted: E206
    - ruff: F831

  - # redefinition of unused function
    - pyflakes: F811
    - pylint: function-redefined
    - ruff: F811

  - # f-string is missing placeholders
    - pylint: f-string-without-interpolation
    - pyflakes: F541
    - ruff: F541

  - # Duplicate key in dictionary
    - pylint: duplicate-key
    - pyflakes: F601
    - ruff: F601

  - # More than one starred expression in assignment
    - pylint: too-many-star-expressions
    - pyflakes: F622
    - ruff: F622

  - # Assert called on a tuple
    - pylint: assert-on-tuple
    - pyflakes: F631
    - ruff: F631

  - # 'break' outside loop
    - pylint: not-in-loop
    - pyflakes: F701
    - ruff: F701

  - # 'continue' not properly in loop
    - pylint: not-in-loop
    - pyflakes: F702
    - ruff: F702

  - # 'continue' not supported inside 'finally' clause
    - pylint: continue-in-finally
    - pylint: E0116
    - pyflakes: F703
    - ruff: F703
    - ruff: PLE0116

  - # Yield outside function
    - pylint: yield-outside-function
    - pyflakes: F704
    - ruff: F704

  - # Return outside function
    - pylint: return-outside-function
    - pyflakes: F706
    - ruff: F706

  - # default 'except:' must be last
    - pylint: bad-except-order
    - pyflakes: F707
    - ruff: F707

  - # NotImplemented raised - should raise NotImplementedError
    - pylint: notimplemented-raised
    - pyflakes: F901
    - ruff: F901

  - # first argument of a classmethod should be named 'cls'
    - pep8: N804
    - pycodestyle: N804
    - pylint: bad-classmethod-argument

  - # '<>' is deprecated, use '!='
    - pep8: W603
    - pycodestyle: W603
    - pylint: W0331

  - # backticks are deprecated, use 'repr()'
    - pep8: W604
    - pycodestyle: W604
    - pylint: W0333

  - # Redefining name from outer scope
    - pylint: redefined-outer-name
    - pyflakes: F810
    - frosted: E306
    - ruff: F810

  - # Redefinition of unused variable
    - pylint: redefined-outer-name
    - pyflakes: F811

  - # Wildcard import
    - pylint: wildcard-import
    - pyflakes: F403
    - frosted: E103
    - ruff: F403

  - # Return with argument inside generator
    - pylint: return-arg-in-generator
    - frosted: E208

  - # Too many positional arguments for function call
    - pylint: too-many-function-args
    - frosted: E203

  - # Passing unexpected keyword argument
    - pylint: unexpected-keyword-arg
    - frosted: E204

  - # Missing mandatory keyword argument
    - pylint: missing-kwoa
    - frosted: E205

  - # No exception type(s) specified
    - pylint: bare-except
    - frosted: W101
    - pep8: E722
    - pycodestyle: E722
    - ruff: E722
    # try_except_pass
    - ruff: S110
    - bandit: B110

  - # No exception type(s) specified
    - pylint: bare-except
    - frosted: W101
    - pep8: E722
    - pycodestyle: E722
    - ruff: E722
    # try_except_continue
    - ruff: S112
    - bandit: B112

  - # Do not catch blind exception: `Exception`
    - pylint: broad-exception-caught
    - ruff: BLE001

  - # Create your own exception
    - pylint: broad-exception-raised
    - ruff: TRY002

  - # Spaces around keyword/parameter equals
    - pep8: E251
    - pycodestyle: E251
    - pylint: bad-whitespace

  - # Missing space after a comma
    - pep8: E231
    - pycodestyle: E231
    - pylint: bad-whitespace

  - # redefinition of unused %r from line %r
    - pyflakes: F811
    - frosted: E301
    - ruff: F811

  - # list comprehension redefines %r from line %r
    - pyflakes: F812
    - frosted: E302
    - ruff: F812

  - # import %r from line %r shadowed by loop variable
    - pyflakes: F402
    - frosted: E102
    - ruff: F402

  - # syntax error in doctest
    - pyflakes: FL0007
    - frosted: E401
    - ruff: FL0007

  - # local variable %r referenced before assignment
    - pyflakes: F823
    - frosted: E305
    - ruff: F823

  - # pep8-naming incorrectly suggests that the first argument of a metaclass __new__ method should be 'cls'
    - pylint: bad-mcs-classmethod-argument
    - pep8: N804
    - pycodestyle: N804

  - # class names should be camelcase
    - pep8: N801
    - pycodestyle: N801
    - pylint: invalid-name

  # function name should be lowercase
  - - pylint: invalid-name
    - pep8: N802
    - pycodestyle: N802

  # argument name should be lowercase
  - - pylint: invalid-name
    - pep8: N803
    - pycodestyle: N803

  # Variable in function should be lowercase
  - - pylint: invalid-name
    - pep8: N806
    - pycodestyle: N806

  # too complex
  - #	Too many branches ({branches} > {max_branches})
    - pylint: too-many-branches
    - pylint: R0912
    - mccabe: MC0001
    - ruff: PLR0912
  - #	Too many statements ({statements} > {max_statements})
    - pylint: too-many-statements
    - pylint: R0915
    - mccabe: MC0001
    - pylint: too-many-statements
    - ruff: PLR0915

  - # pep257 takes preference over pylint documentation warnings
    - pep257: D100
    - pydocstyle: D100
    - pylint: missing-docstring
    - ruff: D100

  - # Missing docstring in public class
    - pep257: D101
    - pydocstyle: D101
    - pylint: missing-docstring
    - ruff: D101

  - # Missing docstring in public method
    - pep257: D102
    - pydocstyle: D102
    - pylint: missing-docstring
    - ruff: D102

  - # Missing docstring in public function
    - pep257: D103
    - pydocstyle: D103
    - pylint: missing-docstring
    - ruff: D103

  - - pylint: singleton-comparison
    - pep8: E711
    - pycodestyle: E711

  - - pylint: subprocess-run-check
    - bandit: B603
    - ruff: S603
    - ruff: PLW1510

  # assert_used
  - - ruff: S101
    - bandit: B101

  # exec_used
  - - ruff: S102
    - bandit: B102

  # set_bad_file_permissions
  - - ruff: S103
    - bandit: B103

  # hardcoded_bind_all_interfaces
  - - ruff: S104
    - bandit: B104

  # hardcoded_password_string
  - - ruff: S105
    - bandit: B105

  # hardcoded_password_funcarg
  - - ruff: S106
    - bandit: B106

  # hardcoded_password_default
  - - ruff: S107
    - bandit: B107

  # hardcoded_tmp_directory
  - - ruff: S108
    - bandit: B108

  # request_without_timeout
  - - pylint: missing-timeout
    - ruff: S113
    - bandit: B113

  # flask_debug_true
  - - ruff: S201
    - bandit: B201

  # tarfile_unsafe_members
  - - ruff: S202
    - bandit: B202

  # hashlib
  - - ruff: S324
    - bandit: B324

  # request_with_no_cert_validation
  - - ruff: S501
    - bandit: B501

  # ssl_with_bad_version
  - - ruff: S502
    - bandit: B502

  # ssl_with_bad_defaults
  - - ruff: S503
    - bandit: B503

  # ssl_with_no_version
  - - ruff: S504
    - bandit: B504

  # weak_cryptographic_key
  - - ruff: S505
    - bandit: B505

  # unsafe-yaml-load
  - - ruff: S506
    - bandit: B506

  # ssh_no_host_key_verification
  - - ruff: S507
    - bandit: B507

  # snmp_insecure_version
  - - ruff: S508
    - bandit: B508

  # snmp_weak_cryptography
  - - ruff: S509
    - bandit: B509

  # paramiko-call
  - - ruff: S601
    - bandit: B601

  # subprocess-popen-with-shell-equals-true
  - - ruff: S602
    - bandit: B602

  # call-with-shell-equals-true
  - - ruff: S604
    - bandit: B604

  # start-process-with-a-shell
  - - ruff: S605
    - bandit: B605

  # start-process-with-no-shell
  - - ruff: S606
    - bandit: B606

  # start-process-with-partial-path
  - - ruff: S607
    - bandit: B607

  # hardcoded-sql-expression
  - - ruff: S608
    - bandit: B608

  # linux-commands-wildcard-injection
  - - ruff: S609
    - bandit: B609

  # django-extra
  - - ruff: S610
    - bandit: B610

  # django-raw-sql
  - - ruff: S611
    - bandit: B611

  # logging-config-insecure-listen
  - - ruff: S612
    - bandit: B612

  # jinja2_autoescape_false
  - - ruff: S701
    - bandit: B701

  # mako-templates
  - - ruff: S702
    - bandit: B702

  # Undefined name
  - - mypy: name-defined
    - ruff: F481

  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  # See: https://docs.astral.sh/ruff/rules/raise-without-from-inside-except
  - - pylint: raise-missing-from
    - ruff: B904

  # Use of possibly insecure function - consider using safer ast.literal_eval
  # See: https://docs.astral.sh/ruff/rules/suspicious-eval-usage
  - - pylint: eval-used
    - bandit: B307
    - ruff: S307

  - # {kind} name "{param_name}" does not reflect its {variance}; consider renaming it to "{replacement_name}"
    - pylint: type-name-incorrect-variance
    - pylint: C0105
    - ruff: PLC0105

  - # {kind} cannot be both covariant and contravariant
    - pylint: type-bivariance
    - pylint: C0131
    - ruff: PLC0131

  - # {kind} name {param_name} does not match assigned variable name {var_name}
    - pylint: type-param-name-mismatch
    - pylint: C0132
    - ruff: PLC0132

  - # Class __slots__ should be a non-string iterable
    - pylint: single-string-slots
    - pylint: C0205
    - ruff: PLC0205

  - # Extracting value from dictionary without calling .items()
    - pylint: dict-index-missing-items
    - pylint: C0206
    - ruff: PLC0206

  - # Use a sequence type instead of a set when iterating over values
    - pylint: iteration-over-set
    - pylint: C0208
    - ruff: PLC0208

  - # Import alias does not rename original package
    - pylint: useless-import-alias
    - pylint: C0414
    - ruff: PLC0414

  - # import should be at the top-level of a file
    - pylint: import-outside-top-level
    - pylint: C0415
    - ruff: PLC0415

  - # len({expression}) used as condition without comparison
    - pylint: len-test
    - pylint: C1802
    - ruff: PLC1802

  - # {existing} can be simplified to {replacement} as an empty string is falsey
    - pylint: compare-to-empty-string
    - pylint: C1901
    - ruff: PLC1901

  - # {kind} name {name} contains a non-ASCII character
    - pylint: non-ascii-name
    - pylint: C2401
    - ruff: PLC2401

  - # Module alias {name} contains a non-ASCII character
    - pylint: non-ascii-import-name
    - pylint: C2403
    - ruff: PLC2403

  - # Private name import {name} from external module {module}
    - pylint: import-private-name
    - pylint: C2701
    - ruff: PLC2701

  - # Unnecessary dunder call to {method}. {replacement}.
    - pylint: unnecessary-dunder-call
    - pylint: C2801
    - ruff: PLC2801

  - # Lambda expression called directly. Execute the expression inline instead.
    - pylint: unnecessary-direct-lambda-call
    - pylint: C3002
    - ruff: PLC3002

  - # __init__ method is a generator
    - pylint: yield-in-init
    - pylint: E0100
    - ruff: PLE0100

  - # Explicit return in __init__
    - pylint: return-in-init
    - pylint: E0101
    - ruff: PLE0101

  - # Name {name} is both nonlocal and global
    - pylint: nonlocal-and-global
    - pylint: E0115
    - ruff: PLE0115

  - # Nonlocal name {name} found without binding
    - pylint: nonlocal-without-binding
    - pylint: E0117
    - ruff: PLE0117

  - # Name {name} is used prior to global declaration on {row}
    - pylint: load-before-global-declaration
    - pylint: E0118
    - ruff: PLE0118

  - # Attribute {name} is not defined in class's __slots__
    - pylint: non-slot-assignment
    - pylint: E0237
    - ruff: PLE0237

  - # Duplicate base {base} for class {class}
    - pylint: duplicate-bases
    - pylint: E0241
    - ruff: PLE0241

  - # The special method {} expects {}, {} {} given
    - pylint: unexpected-special-method-signature
    - pylint: E0302
    - ruff: PLE0302

  - # __len__ does not return a non-negative integer
    - pylint: invalid-length-return-type
    - pylint: E0303
    - ruff: PLE0303

  - # __bool__ does not return bool
    - pylint: invalid-bool-return-type
    - pylint: E0304
    - ruff: PLE0304

  - # __index__ does not return an integer
    - pylint: invalid-index-return-type
    - pylint: E0305
    - ruff: PLE0305

  - # __str__ does not return str
    - pylint: invalid-str-return-type
    - pylint: E0307
    - ruff: PLE0307

  - # __bytes__ does not return bytes
    - pylint: invalid-bytes-return-type
    - pylint: E0308
    - ruff: PLE0308

  - # __hash__ does not return an integer
    - pylint: invalid-hash-return-type
    - pylint: E0309
    - ruff: PLE0309

  - # Invalid object in __all__, must contain only strings
    - pylint: invalid-all-object
    - pylint: E0604
    - ruff: PLE0604

  - # Invalid format for __all__, must be tuple or list
    - pylint: invalid-all-format
    - pylint: E0605
    - ruff: PLE0605

  - # Expression is likely to raise IndexError
    - pylint: potential-index-error
    - pylint: E0643
    - ruff: PLE0643

  - # Bare raise statement is not inside an exception handler
    - pylint: misplaced-bare-raise
    - pylint: E0704
    - ruff: PLE0704

  - # Repeated keyword argument: {duplicate_keyword}
    - pylint: repeated-keyword-argument
    - pylint: E1132
    - ruff: PLE1132

  - # Unpacking a dictionary in iteration without calling .items()
    - pylint: dict-iter-missing-items
    - pylint: E1141
    - ruff: PLE1141

  - # await should be used within an async function
    - pylint: await-outside-async
    - pylint: E1142
    - ruff: PLE1142

  - # Too many arguments for logging format string
    - pylint: logging-too-many-args
    - pylint: E1205
    - ruff: PLE1205

  - # Not enough arguments for logging format string
    - pylint: logging-too-few-args
    - pylint: E1206
    - ruff: PLE1206

  - # Unsupported format character '{format_char}'
    - pylint: bad-string-format-character
    - pylint: E1300
    - ruff: PLE1300

  - # Format type does not match argument type
    - pylint: bad-string-format-type
    - pylint: E1307
    - ruff: PLE1307

  - # String {strip} call contains duplicate characters (did you mean {removal}?)
    - pylint: bad-str-strip-call
    - pylint: E1310
    - ruff: PLE1310

  - # Invalid type for initial os.getenv argument; expected str
    - pylint: invalid-envvar-value
    - pylint: E1507
    - ruff: PLE1507

  - # @singledispatch decorator should not be used on methods
    - pylint: singledispatch-method
    - pylint: E1519
    - ruff: PLE1519

  - # @singledispatchmethod decorator should not be used on non-method functions
    - pylint: singledispatchmethod-function
    - pylint: E1520
    - ruff: PLE1520

  - # yield from statement in async function; use async for instead
    - pylint: yield-from-in-async-function
    - pylint: E1700
    - ruff: PLE1700

  - #	Contains control characters that can permit obfuscated code
    - pylint: bidirectional-unicode
    - pylint: E2502
    - ruff: PLE2502

  - #	Invalid unescaped character backspace, use "\b" instead
    - pylint: invalid-character-backspace
    - pylint: E2510
    - ruff: PLE2510

  - #	Invalid unescaped character SUB, use "\x1a" instead
    - pylint: invalid-character-sub
    - pylint: E2512
    - ruff: PLE2512

  - #	Invalid unescaped character ESC, use "\x1b" instead
    - pylint: invalid-character-esc
    - pylint: E2513
    - ruff: PLE2513

  - #	Invalid unescaped character NULL, use "\x00" instead
    - pylint: invalid-character-nul
    - pylint: E2514
    - ruff: PLE2514

  - #	Invalid unescaped character zero-width-space, use "\u200B" instead
    - pylint: invalid-character-zero-width-space
    - pylint: E2515
    - ruff: PLE2515

  - #	Iterated set {name} is modified within the for loop
    - pylint: modified-iterating-set
    - pylint: E2515
    - ruff: PLE2515

  - #	Name compared with itself, consider replacing {actual}
    - pylint: comparison-with-itself
    - pylint: R0124
    - ruff: PLR0124

  - #	Two constants compared in a comparison, consider replacing {left_constant} {op} {right_constant}
    - pylint: comparison-of-constant
    - pylint: R0133
    - ruff: PLR0133

  - #	Class method defined without decorator
    - pylint: no-classmethod-decorator
    - pylint: R0202
    - ruff: PLR0202

  - #	Static method defined without decorator
    - pylint: no-staticmethod-decorator
    - pylint: R0203
    - ruff: PLR0203

  - #	Cannot have defined parameters for properties
    - pylint: property-with-parameters
    - pylint: R0206
    - ruff: PLR0206

  - #	Use from {module} import {name} in lieu of alias
    - pylint: manual-from-import
    - pylint: R0402
    - ruff: PLR0402

  - #	Too many public methods ({methods} > {max_methods})
    - pylint: too-many-public-methods
    - pylint: R0904
    - ruff: PLR0904

  - #	Too many return statements ({returns} > {max_returns})
    - pylint: too-many-return-statements
    - pylint: R0911
    - ruff: PLR0911

  - #	Too many arguments in function definition ({c_args} > {max_args})
    - pylint: too-many-arguments
    - pylint: R0913
    - ruff: PLR0913

  - #	Too many local variables ({current_amount}/{max_amount})
    - pylint: too-many-locals
    - pylint: R0914
    - ruff: PLR0914

  - #	Too many Boolean expressions ({expressions} > {max_expressions})
    - pylint: too-many-boolean-expressions
    - pylint: R0916
    - ruff: PLR0916

  - #	Too many positional arguments ({c_pos}/{max_pos})
    - pylint: too-many-positional-arguments
    - pylint: R0917
    - ruff: PLR0917

  - #	Merge isinstance calls: {expression}
    - pylint: repeated-isinstance-calls
    - pylint: R1701
    - ruff: PLR1701

  - #	Too many nested blocks ({nested_blocks} > {max_nested_blocks})
    - pylint: too-many-nested-blocks
    - pylint: R1702
    - ruff: PLR1702

  - #	Redefining argument with the local name {name}
    - pylint: redefined-argument-from-local
    - pylint: R1704
    - ruff: PLR1704

  - #	Consider using if-else expression
    - pylint: and-or-ternary
    - pylint: R1706
    - ruff: PLR1706

  - #	Useless return statement at end of function
    - pylint: useless-return
    - pylint: R1711
    - ruff: PLR1711

  - #	Consider merging multiple comparisons: {expression}. Use a set if the elements are hashable.
    - pylint: repeated-equality-comparison
    - pylint: R1714
    - ruff: PLR1714

  - #	Contains chained boolean comparison that can be simplified
    - pylint: boolean-chained-comparison
    - pylint: R1716
    - ruff: PLR1716

  - #	Use sys.exit() instead of {name}
    - pylint: sys-exit-alias
    - pylint: R1722
    - ruff: PLR1722

  - #	Replace if statement with {replacement}
    - pylint: if-stmt-min-max
    - pylint: R1730
    - ruff: PLR1730

  - #	Unnecessary lookup of dictionary value by key
    - pylint: unnecessary-dict-index-lookup
    - pylint: R1733
    - ruff: PLR1733

  - #	List index lookup in enumerate() loop
    - pylint: unnecessary-list-index-lookup
    - pylint: R1736
    - ruff: PLR1736

  - #	Magic value used in comparison, consider replacing {value} with a constant variable
    - pylint: magic-value-comparison
    - pylint: R2004
    - ruff: PLR2004

  - #	Line with empty comment
    - pylint: empty-comment
    - pylint: R2044
    - ruff: PLR2044

  - #	Use elif instead of else then if, to reduce indentation
    - pylint: collapsible-else-if
    - pylint: R5501
    - ruff: PLR5501

  - #	Use {operator} to perform an augmented assignment directly
    - pylint: non-augmented-assignment
    - pylint: R6104
    - ruff: PLR6104

  - #	Use a set literal when testing for membership
    - pylint: literal-membership
    - pylint: R6201
    - ruff: PLR6201

  - #	Method {method_name} could be a function, class method, or static method
    - pylint: no-self-use
    - pylint: R6301
    - ruff: PLR6301

  - #	Lambda may be unnecessary; consider inlining inner function
    - pylint: unnecessary-lambda
    - pylint: W0108
    - ruff: PLW0108

  - #	else clause on loop without a break statement; remove the else and dedent its contents
    - pylint: useless-else-on-loop
    - pylint: W0120
    - ruff: PLW0120

  - #	Self-assignment of variable {name}
    - pylint: self-assigning-variable
    - pylint: W0127
    - ruff: PLW0127

  - #	Redeclared variable {name} in assignment
    - pylint: redeclared-assigned-name
    - pylint: W0128
    - ruff: PLW0128

  - #	Asserting on an empty string literal will never pass
    - pylint: assert-on-string-literal
    - pylint: W0129
    - ruff: PLW0129

  - #	Named expression used without context
    - pylint: named-expr-without-context
    - pylint: W0131
    - ruff: PLW0131

  - #	Missing raise statement on exception
    - pylint: useless-exception-statement
    - pylint: W0133
    - ruff: PLW0133

  - #	Comparing against a NaN value; use math.isnan instead
    - pylint: nan-comparison
    - pylint: W0177
    - ruff: PLW0177

  - #	First argument of a static method should not be named {argument_name}
    - pylint: bad-staticmethod-argument
    - pylint: W0211
    - ruff: PLW0211

  - #	Slot {slot_name} redefined from base class {base}
    - pylint: redefined-slots-in-subclass
    - pylint: W0244
    - ruff: PLW0244

  - #	super call is missing parentheses
    - pylint: super-without-brackets
    - pylint: W0245
    - ruff: PLW0245

  - #	Module {name} imports itself
    - pylint: import-self
    - pylint: W0406
    - ruff: PLW0406

  - #	Using global for {name} but no assignment is done
    - pylint: global-variable-not-assigned
    - pylint: W0602
    - ruff: PLW0602

  - #	Using the global statement to update {name} is discouraged
    - pylint: global-statement
    - pylint: W0603
    - ruff: PLW0603

  - #	global at module level is redundant
    - pylint: global-at-module-level
    - pylint: W0604
    - ruff: PLW0604

  - #	Reassigned {} variable in {method_type} method
    - pylint: self-or-cls-assignment
    - pylint: W0642
    - ruff: PLW0642

  - #	Exception to catch is the result of a binary and operation
    - pylint: binary-op-exception
    - pylint: W0711
    - ruff: PLW0711

  - #	{mode} is not a valid mode for open
    - pylint: bad-open-mode
    - pylint: W1501
    - ruff: PLW1501

  - #	Shallow copy of os.environ via copy.copy(os.environ)
    - pylint: shallow-copy-environ
    - pylint: W1507
    - ruff: PLW1507

  - #	Invalid type for environment variable default; expected str or None
    - pylint: invalid-envvar-default
    - pylint: W1508
    - ruff: PLW1508

  - #	preexec_fn argument is unsafe when using threads
    - pylint: subprocess-popen-preexec-fn
    - pylint: W1509
    - ruff: PLW1509

  - #	subprocess.run without explicit check argument
    - pylint: subprocess-run-without-check
    - pylint: W1510
    - ruff: PLW1510

  - #	{function_name} in text mode without explicit encoding argument
    - pylint: unspecified-encoding
    - pylint: W1514
    - ruff: PLW1514

  - #	Object does not implement __hash__ method
    - pylint: eq-without-hash
    - pylint: W1641
    - ruff: PLW1641

  - #	Threading lock directly created in with statement has no effect
    - pylint: useless-with-lock
    - pylint: W2101
    - ruff: PLW2101

  - #	Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    - pylint: redefined-loop-name
    - pylint: W2901
    - ruff: PLW2901

  - #	Dunder method {name} has no special meaning in Python 3
    - pylint: bad-dunder-method-name
    - pylint: W3201
    - ruff: PLW3201

  - # Nested {func} calls can be flattened
    - pylint: nested-min-max
    - pylint: W3301
    - ruff: PLW3301

  - # Missing docstring in public package
    - ruff: D104
    - pycodestyle: D104
    - pep257: D104

  - # Missing docstring in magic method
    - ruff: D105
    - pycodestyle: D105
    - pep257: D105

  - # Missing docstring in public nested class
    - ruff: D106
    - pycodestyle: D106
    - pep257: D106

  - # Missing docstring in __init__
    - ruff: D107
    - pycodestyle: D107
    - pep257: D107

  - # One-line docstring should fit on one line
    - ruff: D200
    - pycodestyle: D200
    - pep257: D200

  - # No blank lines allowed before function docstring (found {num_lines})
    - ruff: D201
    - pycodestyle: D201
    - pep257: D201

  - # No blank lines allowed after function docstring (found {num_lines})
    - ruff: D202
    - pycodestyle: D202
    - pep257: D202

  - # 1 blank line required before class docstring
    - ruff: D203
    - pycodestyle: D203
    - pep257: D203

  - # 1 blank line required after class docstring
    - ruff: D204
    - pycodestyle: D204
    - pep257: D204

  - # 1 blank line required between summary line and description
    - ruff: D205
    - pycodestyle: D205
    - pep257: D205

  - # Multi-line docstring closing quotes should be on a separate line
    - ruff: D209
    - pycodestyle: D209
    - pep257: D209

  - # No whitespaces allowed surrounding docstring text
    - ruff: D210
    - pycodestyle: D210
    - pep257: D210

  - # No blank lines allowed before class docstring
    - ruff: D211
    - pycodestyle: D211
    - pep257: D211

  - # Multi-line docstring summary should start at the first line
    - ruff: D212
    - pycodestyle: D212
    - pep257: D212

  - # Multi-line docstring summary should start at the second line
    - ruff: D213
    - pycodestyle: D213
    - pep257: D213

  - # Section is over-indented ("{name}")
    - ruff: D214
    - pycodestyle: D214
    - pep257: D214

  - # Section underline is over-indented ("{name}")
    - ruff: D215
    - pycodestyle: D215
    - pep257: D215

  - # Use triple double quotes """
    - ruff: D300
    - pycodestyle: D300
    - pep257: D300

  - # Use r""" if any backslashes in a docstring
    - ruff: D301
    - pycodestyle: D301
    - pep257: D301

  - # First line should end with a period
    - ruff: D400
    - pycodestyle: D400
    - pep257: D400

  - # First line of docstring should be in imperative mood: "{first_line}"
    - ruff: D401
    - pycodestyle: D401
    - pep257: D401

  - # First line should not be the function's signature
    - ruff: D402
    - pycodestyle: D402
    - pep257: D402

  - # First word of the docstring should be capitalized: {} -> {}
    - ruff: D403
    - pycodestyle: D403
    - pep257: D403

  - # First word of the docstring should not be "This"
    - ruff: D404
    - pycodestyle: D404
    - pep257: D404

  - # Section name should be properly capitalized ("{name}")
    - ruff: D405
    - pycodestyle: D405
    - pep257: D405

  - # Section name should end with a newline ("{name}")
    - ruff: D406
    - pycodestyle: D406
    - pep257: D406

  - # Missing argument description in the docstring for {definition}: {name}
    - ruff: D407
    - pycodestyle: D407
    - pep257: D407

  - # Section underline should be in the line following the section's name ("{name}")
    - ruff: D408
    - pycodestyle: D408
    - pep257: D408

  - # Section underline should match the length of its name ("{name}")
    - ruff: D409
    - pycodestyle: D409
    - pep257: D409

  - # Missing blank line after section ("{name}")
    - ruff: D410
    - pycodestyle: D410
    - pep257: D410

  - # Missing blank line before section ("{name}")
    - ruff: D411
    - pycodestyle: D411
    - pep257: D411

  - # No blank lines allowed between a section header and its content ("{name}")
    - ruff: D412
    - pycodestyle: D412
    - pep257: D412

  - # Missing blank line after last section ("{name}")
    - ruff: D413
    - pycodestyle: D413
    - pep257: D413

  - # Section has no content ("{name}")
    - ruff: D414
    - pycodestyle: D414
    - pep257: D414

  - # First line should end with a period, question mark, or exclamation point
    - ruff: D415
    - pycodestyle: D415
    - pep257: D415

  - # Section name should end with a colon ("{name}")
    - ruff: D416
    - pycodestyle: D416
    - pep257: D416

  - # Missing argument(s) in the docstring for {definition}: {name}
    - ruff: D417
    - pycodestyle: D417
    - pep257: D417

  - # Function decorated with @overload shouldn't contain a docstring
    - ruff: D418
    - pycodestyle: D418
    - pep257: D418

  - # Docstring is empty
    - ruff: D419
    - pycodestyle: D419
    - pep257: D419
